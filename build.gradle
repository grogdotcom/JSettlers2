// JSettlers build script for gradle 2 or higher
// See bottom of file for copyright and license information (GPLv3).

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'idea'

buildscript {
    repositories {
        mavenCentral()
        maven { url "http://google-diff-match-patch.googlecode.com/svn/trunk/maven" }
    }
}

version = '2.0.00'  // same as in src/main/resources/resources/version.info

mainClassName = "soc.client.SOCPlayerClient"

compileJava {
    sourceCompatibility = '1.6'
    targetCompatibility = '1.6'
}

sourceSets {
    extraTest {
        // also runs extraTest/python/*.py, see task extraTaskPython below
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDirs = ['src/extraTest/java']
        }
        // if needed later: resources.srcDir file('src/extraTest/resources')
    }
}

configurations {
    extraTestCompile.extendsFrom testCompile
    extraTestRuntime.extendsFrom testRuntime
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'  // override the system's default encoding
        // To test that this has an effect, use 'Cp1252' instead here and expect "unmappable character" errors in StringUtil.java
}

tasks.withType(Test) { task ->
    task.outputs.upToDateWhen { false }  // never skip testing ("UP-TO-DATE") when it's asked for or is dependency
    task.afterSuite { desc, result ->
        if (! desc.parent) {
            // print overall results only
            // Testing results: :test SUCCESS (62 tests, 62 successes, 0 failures, 0 skipped)
            logger.lifecycle("Testing results: {} {} ({} tests, {} successes, {} failures, {} skipped)", task.path,
                result.resultType, result.testCount, result.successfulTestCount, result.failedTestCount, result.skippedTestCount)
        }
    }
}

tasks.withType(Jar) {
    includeEmptyDirs = false
}

jar.enabled = false  // prevent default jsettlers.git-<version>.jar artifact creation
distZip.enabled = false   // TODO revisit later, with more control over contents
distTar.enabled = false   // TODO revisit later, with more control over contents

task serverJar(type: Jar) {
    baseName = 'JSettlersServer'
    version = project.version
    manifest {
        attributes(
            'Main-Class': 'soc.server.SOCServer'
        )
    }
    from(sourceSets.main.output) {
        include "net/nand/util/i18n/mgr/**"
        include "soc/baseclient/**"
        include "soc/debug/**"
        include "soc/disableDebug/**"
        include "soc/game/**"
        include "soc/message/**"
        include "soc/robot/**"
        include "soc/server/**"
        include "soc/util/**"
    }
    from(sourceSets.main.resources) {
        include "resources/version.info"
        include "resources/strings/server/**"
    }
}

task fullJar(type: Jar) {
    baseName = 'JSettlers'
    version = project.version
    manifest {
        attributes(
            'Main-Class': 'soc.client.SOCPlayerClient'
        )
    }
    from(sourceSets.main.output) {
        include "net/nand/util/i18n/mgr/**"
        include "soc/**"
    }
    from(sourceSets.main.resources) {
        include "**"
    }
}

task extraTestPython <<{  // (type: Test) -- unsure what's needed to use as unit tests (TODO)
    fileTree("src/extraTest/python").matching{ include "**/*.py"}.each { pyfi ->
        exec {
            executable 'python'  // expected to be in PATH
            workingDir pyfi.getParentFile()
            args pyfi.absolutePath
            environment CLASSPATH: tasks.extraTest.classpath.asPath
        }
    }
}

task extraTest(type: Test) {
    testClassesDir = sourceSets.extraTest.output.classesDir
    classpath = sourceSets.extraTest.runtimeClasspath
    reports.junitXml.destination = file("$buildDir/extraTest-results")  // unit tests use buildDir/test-results
    reports.html.destination = file("$buildDir/reports/extraTests")     // unit tests use buildDir/reports/tests
    outputs.upToDateWhen { false }  // never skip running it
}

extraTest.dependsOn test, extraTestPython

// TODO i18neditor (see build.xml build-i18neditor)

repositories {
    mavenCentral()
}
//
//jar {
//    into 'resources', {
//        from 'resources'
//    }
//}

dependencies {
    testCompile 'junit:junit:4.12'
}

artifacts {
    archives serverJar, fullJar
}

/*
 * This file is part of the JSettlers project.
 *
 * This file Copyright (C) 2017 Ruud Poutsma <rtimon@gmail.com>
 * Portions of this file Copyright (C) 2017,2019 Jeremy D Monin <jeremy@nand.net>
 * Portions of this file Copyright (C) 2019 Colin Werner
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/ .
 */
